<?php

declare(strict_types=1);

namespace App\UI\Dodavatele;

use App\Model\DodavateleManager;
use Contributte\FormsBootstrap\BootstrapForm;
use Nette;


final class DodavatelePresenter extends Nette\Application\UI\Presenter
{
    /** @var DodavateleManager @inject */
    public $dodavateleManager;
    private string $userId;
    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub

        if(!$this->user->isLoggedIn())
        {
            $this->flashMessage('Pro tuto akci musíte být přihlašen', 'danger');
            $this->redirect('Sign:in');
        }else
        {
            $this->userId = $this->user->identity->getData()['userId'];

        }
    }


    public function renderShow()
    {
        $dodavatele = $this->dodavateleManager->findAllDodavatele($this->userId);
        $this->template->dodavatele = $dodavatele;
    }

    public function actionDelete(int $dodavatelId):void
    {
        $result = $this->dodavateleManager->deleteDodavatel($dodavatelId, $this->userId);

        if($result)
        {
            // Přesměrování po úspěšném smazani
            $this->flashMessage('Dodavatel byl úspěšně smazán.', 'success');
            $this->redirect('Dodavatele:show');
        }else
        {
            // Přesměrování po neúspěšném smazani
            $this->flashMessage('Dodavatel NEBYL úspěšně smazán.', 'danger');
            $this->redirect('Dodavatele:show');
        }


    }
    public function actionNovyDodavatel(): void
    {

    }
    public function actionEditace(int $dodavatelId): void
    {

            // Načtení dodavatele z databáze podle ID a userId
            $dodavatel = $this->dodavateleManager->findDodavatelById($dodavatelId, $this->userId);


            if (!$dodavatel) {
                $this->flashMessage('Dodavatel nebyl nalezen.', 'danger');
                $this->redirect('Dodavatele:show');
            }


            $this->template->dodavatel = $dodavatel;

            $this['editForm']->setDefaults([
                'nazev' => $dodavatel->nazev,
                'ico' => $dodavatel->ico,
                'telefon' => $dodavatel->telefon,
            ]);

    }

    protected function createComponentEditForm(): BootstrapForm
    {
        $form = new BootstrapForm();
        $form->addText('nazev', 'Název:')
            ->setRequired('Zadejte název dodavatele.');

        $form->addText('ico', 'IČO:')
            ->setRequired('Zadejte IČO.');

        $form->addText('telefon', 'Telefon:')
            ->setRequired('Zadejte telefon.');

        $form->addSubmit('submit', 'Uložit změny');

        $form->onSuccess[] = [$this, 'editFormSucceeded'];

        return $form;
    }

    public function editFormSucceeded(BootstrapForm $form, array $values): void
    {
        // Získání ID z URL

        $dodavatelId = (int) $this->getParameter('dodavatelId');

        if($dodavatelId) {
            // update db
            $this->dodavateleManager->updateDodavatel($dodavatelId, $this->userId, $values);

            // posleme ho zpatky na vypis dodavatelů s flashmessage
            $this->flashMessage('Dodavatel byl úspěšně upraven.', 'success');
            $this->redirect('Dodavatele:show');
        }else{
            $data = [
                'nazev' => $values['nazev'],
                'ico' => $values['ico'],
                'telefon' => $values['telefon'],
                'userId' => $this->userId
            ];
            $this->dodavateleManager->createDodavatel($data);

            $this->flashMessage('Nový dodavatel úspěšně vytvořen', 'success');
            $this->redirect('Dodavatele:show');
        }
    }



}
